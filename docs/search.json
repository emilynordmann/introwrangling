[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"Insert abstract paper hereThe dataset code used tutorial available INSERT OSF URL whilst interactive version tutorial available https://psyteachr.github.io/introwrangling/ includes solutions activities appendix additional resources advanced plotting options.","code":""},{"path":"index.html","id":"citing","chapter":"Overview","heading":"0.1 Citing","text":"Please cite preprint interactive online tutorial :Nordmann, E., Mackay, J.M., Banas, K., Cleland .., & DeBruine, L. (2022). Data wrangling using R, researchers use R.","code":""},{"path":"index.html","id":"author-contributions","chapter":"Overview","heading":"0.2 Author contributions","text":"EN: Conceptualization, Software, Resources, Writing - Original Draft, Writing - Review & Editing, Project administration\nJM:\nKB:\nAAC:\nLD:","code":""},{"path":"index.html","id":"statement-on-use-of-ai","chapter":"Overview","heading":"0.3 Statement on use of AI","text":"ChatGPT 4.0 used assist portions writing tutorial. Primarily, ChatGPT used assist writing code simulate data. Additionally, used ChatGPT proof-read check typos code well provide feedback suggest alternative approaches coding.","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Use programming language R (R Core Team, 2022) data processing statistical analysis researchers continues grow, part fueled increasing recognition need research fields transparent reproducible (CITATIONS). Nordmann et al. (2022), provided introductory tutorial data visualization R help support researchers unfamiliar R produce reproducible visualisations increase transparency regarding true nature raw data, rather relying aggregated plots bar charts.tutorial, focus data wrangling. Data wrangling art cleaning, structuring, transforming raw data desired format analysis visualization can performed (GET DEFINTION CITATION). Although data wrangling first essential step analysis pipeline, can often prove difficult part due maxim \"tidy datasets tidy way, messy datasets messy way\" (Whickam, tidy data paper CHECK QUOTE ACTUALLY WORDS). Indeed, rationale approach taken Nordmann et al., (2022) although data visualisation first step analysis pipeline, perhaps accessible encouraging researchers learn code. recognition difficulty, Nordmann et al. encourage performing pre-processing steps point--click software allowed researchers move visualizing data using R.follow-tutorial, build experience confidence established Nordmann et al. (2022) help support development skills related difficult, yet arguably crucial step. current tutorial stand-alone can completed without working Nordmann et al. (2022), although set may prove particularly useful. Parts tutorial concerning initial set-steps adapted Nordmann et al. (2022) ensure consistency.","code":""},{"path":"introduction.html","id":"why-r-for-data-wrangling","chapter":"1 Introduction","heading":"1.1 Why R for data wrangling?","text":"ReproducibiityAbility share codeCan save time re-run analysis steps, can write code based pilot simulated data whilst waiting ethics data collection etc.Advanced data wrangling options, pivots, joins etc., allows researchers use tools data scienceGives better understanding data structures, difficult initially, long-run, gives control knowledge.","code":""},{"path":"introduction.html","id":"tutorial-components","chapter":"1 Introduction","heading":"1.2 Tutorial components","text":"tutorial contains three components.traditional PDF manuscript can easily saved, printed, cited.online version tutorial published https://psyteachr.github.io/introdatawrangling/ may easier copy paste code also provides optional activity solutions well additional appendices, including code tutorials advanced plots beyond scope paper links additional resources.Open Science Framework repository published INSERT OSF LINK contains simulated dataset (see ), preprint, R Markdown workbook.","code":""},{"path":"introduction.html","id":"simulated-dataset","chapter":"1 Introduction","heading":"1.3 Simulated dataset","text":"Nordmann et al. (2022), used simulated dataset lexical decision task 100 participants decide whether presented word real word non-word. dataset cleaned aggregated, , participant single aggregated reaction time single aggregated accuracy score condition averaged number trials.current tutorial, simulated data represents raw data used create aggregated data Nordmann et al. (2022) (although please note simulation simulation, .e., raw data provided tutorial reproduce means previous tutorial UNLESS LISA CAN SOMETHING CODE MAKE HAPPEN).102 files total.all_words.csv three variables: Word (word presented trial), Word type (whether word real word non-word), trial_type (practice trial experimental trial). 111 rows data, header row variable names, 100 experimental trials (50 real words 50 non-words), 10 practice trials (5 real words 5 non-words).all_words.csv three variables: Word (word presented trial), Word type (whether word real word non-word), trial_type (practice trial experimental trial). 111 rows data, header row variable names, 100 experimental trials (50 real words 50 non-words), 10 practice trials (5 real words 5 non-words).participant_demographics three variables: ID anonymous ID number 1 100, age whole years, language (1 = monolingual, 2 = bilingual). 100 rows data,one participant.participant_demographics three variables: ID anonymous ID number 1 100, age whole years, language (1 = monolingual, 2 = bilingual). 100 rows data,one participant.folder trial_data contains 100 separate .csv files, one participant, named format participant_1_trials.csv. file contains six variables; ID (participant's anonymous ID number), word (word presented trial), accuracy (whether participant correctly identified word real two values correct incorrect), rt (participant's reaction time respond trial milliseconds), trial_type (practice trial experimental trial), trial_number (order trial presented , 1 110).folder trial_data contains 100 separate .csv files, one participant, named format participant_1_trials.csv. file contains six variables; ID (participant's anonymous ID number), word (word presented trial), accuracy (whether participant correctly identified word real two values correct incorrect), rt (participant's reaction time respond trial milliseconds), trial_type (practice trial experimental trial), trial_number (order trial presented , 1 110).","code":""},{"path":"introduction.html","id":"setting-up-r-and-rstudio","chapter":"1 Introduction","heading":"1.4 Setting up R and RStudio","text":"strongly encourage use RStudio write code R. R programming language whilst RStudio integrated development environment makes working R easier. information installing R RStudio can found additional resources.Projects useful way keeping code, data, output one place. create new project, open RStudio click File - New Project - New Directory - New Project. prompted give project name, select location store project computer. done , click Create Project. Download simulated dataset code tutorial Rmd file online materials move folder. files pane bottom right RStudio now display folder files contains - known working directory R look data wish import save output create.tutorial require use packages tidyverse collection. Additionally, also require use rio janitor. install packages, copy paste code console (left hand pane) press enter execute code.R Markdown dynamic format allows combine text code one reproducible document. R Markdown workbook available [online materials](INSERT OSF LINK{target=\"_blank\"} contains code tutorial information links additional resources use R Markdown reproducible reports additional resources.reason code included workbook every time run install command code install latest version package. Leaving code script can lead unintentionally install package update want. reason, avoid including install code script Markdown document.information use R RStudio, please see additional resources online appendices.","code":"\n# only run in the console, never put this in a script \npackage_list <- c(\"tidyverse\", \"rio\", \"janitor\")\ninstall.packages(package_list)"},{"path":"reading-and-checking-data.html","id":"reading-and-checking-data","chapter":"2 Reading and checking data","heading":"2 Reading and checking data","text":"","code":""},{"path":"reading-and-checking-data.html","id":"loading-packages","chapter":"2 Reading and checking data","heading":"2.1 Loading packages","text":"load packages functions need tutorial, use library() function. Whilst need install packages , need load packages want use library() every time start R start new session. load tidyverse, actually load several separate packages part collection designed work together. R produce message tells names packages loaded.","code":"\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(janitor)"},{"path":"reading-and-checking-data.html","id":"importing-data","chapter":"2 Reading and checking data","heading":"2.2 Importing data","text":"Now loaded packages need, can read data files. often case coding R, many different functions packages one can use load data files. multiple functions can used read specific types files useful use particularly difficult datasets may need wrangle data ways specific file type.example, readr::read_tsv() readr::read_csv() can used import .tsv .csv files using readr package loaded part tidyverse, whilst readxl::read_excel() used read .xlsx files haven::read_sav() can used import .sav files SPSS.However, easier alternative data files relatively straightforward, use import function rio package. import handle file types many - console, type ?rio::import see help documentation list file types can handle.load all_words.csv participant_demographics.csv, use import function:code created two objects all_words ppt_demo read data two files. object appear environment pane top right. Note name data file must quotation marks file extension (.csv) must also included. receive error …exist current working directory highly likely made typo file name (remember R case sensitive), forgotten include file extension .csv, data file want load stored project folder. get error find function means either loaded correct package (common beginner error write code, run ), made typo function name.Loading individual participant trial data requires slightly different approach. write code 100 times, waste time likely lead human error. Instead, can use two functions first create list files want, load list, combine files single data frame.first step create object named file_list using function list.files. path data stored, whilst pattern rule function use determine files list. multiple pattern options achieve outcome:pattern = \"participant_* lists files starts string participant_. asterisk * wildcard character can match sequence characters, long starts participant_ anything can come included.pattern = \"*.csv lists files end .csv name .can also remove pattern argument just list files directory.case, three work one choose depend upon organisation naming conventions data.Next, can use map_df() function tidyverse. map_df() applies function element list combines results single data frame. case, applies function import() file listed file_list. needed use specific function like read_csv() read_excel(), replace import() function required.","code":"\nall_words <- import(\"data/all_words.csv\")\nppt_demo <- import(\"data/participant_demographics.csv\")\n# List all files in the directory starting with `participant_`\nfile_list <- list.files(path = \"book/data/trial_data\", \n                        pattern = \"participant_*\", \n                        full.names = TRUE)\n\n# List all files in the directory ending with `csv`\nfile_list <- list.files(path = \"book/data/trial_data\", \n                        pattern = \"*.csv\", \n                        full.names = TRUE)\n\n# List all files in the directory\nfile_list <- list.files(path = \"book/data/trial_data\", \n                        full.names = TRUE)\n# Read and combine all files into a single data frame\nall_data <- file_list |>\n  map_df(~import(.))"},{"path":"reading-and-checking-data.html","id":"the-pipe","chapter":"2 Reading and checking data","heading":"2.3 The pipe","text":"code uses |> operator, otherwise known pipe. takes output left-hand side uses input expression right-hand side may usefully translated \"\". example, code can read :Start object file_list ;Use map_df() apply function import file .pipe introduced R version 4.1.0 functionally similar %>% pipe part tidyverse used Nordmann et al. (2022). reason switched using Base R pipe require load tidyverse (package) use generalisable different approaches coding.","code":""},{"path":"reading-and-checking-data.html","id":"checking-your-data","chapter":"2 Reading and checking data","heading":"2.4 Checking your data","text":"Whenever import create object, first thing check help identify type cleaning processing need conduct , unless working sanitized data, highly likely need type cleaning.","code":""},{"path":"reading-and-checking-data.html","id":"variable-names","chapter":"2 Reading and checking data","heading":"2.4.1 Variable names","text":"First, look variable names file. R case sensitive also like spaces file names. researcher always control data entered, however, useful keep following conventions mind:Variable names descriptive enough convey purpose data contain concise short become cryptic. instance, tmp might vague, age temp_data descriptive.common use lowercase letters variable names, nothing else, means remember used capital letter.R like spaces best practice separate words underscores known \"snake_case\", e.g., total_sales. Although dots allowed variable names R (e.g., total.sales), can confusing dots specific meaning uses. Therefore, better avoid variable names.use names variables objects reserved words R, like , else, repeat, , function, etc. common one avoid many functions argument named data name objects dat my_data, rather just data.addition spaces reserved names, avoid using special characters like @, #, $, %, ^, &, *, etc., variable names can misinterpreted R.Whatever naming convention choose, consistent throughout code. Consistency helps making code readable maintainable.","code":""},{"path":"reading-and-checking-data.html","id":"data-checking-functions","chapter":"2 Reading and checking data","heading":"2.4.2 Data checking functions","text":"number functions can use check data two common useful ones str() summary().str() print structure data file new row variable useful function keep mind dataset large number variables. str() give name variable (e.g., Word), variable type (case variables chr character type variables), display first observations variable.summary() also provides list variables, although rather providing first observations, gives summary statistics form descriptive statistics.","code":"\nstr(all_words)\nstr(ppt_demo)## 'data.frame':    110 obs. of  3 variables:\n##  $ Word      : chr  \"apple\" \"chair\" \"table\" \"grape\" ...\n##  $ Word type : chr  \"word\" \"word\" \"word\" \"word\" ...\n##  $ trial_type: chr  \"experimental\" \"experimental\" \"experimental\" \"experimental\" ...\n## 'data.frame':    100 obs. of  3 variables:\n##  $ ID      : int  1 2 3 4 5 6 7 8 9 10 ...\n##  $ age     : int  30 29 19 30 29 20 31 28 24 27 ...\n##  $ language: int  1 2 2 2 2 1 1 2 2 1 ...\nsummary(all_data)## < table of extent 0 x 0 >"},{"path":"reading-and-checking-data.html","id":"cleaning-variable-names","chapter":"2 Reading and checking data","heading":"2.4.3 Cleaning variable names","text":"can see str() summary() issues variable names. First, mix lowercase capital letters (e.g., Word, ID) Word type also contains space.incredibly useful function become part default data import process janitor::clean_names(). function transforms variable names lowercase, unique dataset, contain characters, numbers, letters. Using pipe |>, can add function code imports data.run str() object, now see ID become id, Word type become word_type, Word become word. Ensuring variable names consistent easy work first step make data wrangling much simpler step overlooked.","code":"\n# load in the data and then clean the variable names\n\nall_words <- import(\"data/all_words.csv\") |>\n  clean_names()\n\nppt_demo <- import(\"data/participant_demographics.csv\")|>\n  clean_names()\n\nall_data <- file_list |>\n  map_df(~import(.))|>\n  clean_names()"},{"path":"reading-and-checking-data.html","id":"data-types","chapter":"2 Reading and checking data","heading":"2.5 Data types","text":"Data can numbers, words, true/false values combinations . basic data types R : numeric, character, logical, well special classes factor date/times. Factors particularly important data type research data represent categorical variables, example, experimental independent variables (type word current example) demographic variables (language group two levels, monolingual bilingual).ever want know data type specific variable, can use typeof function. notation used can read object$variable, , return type data variable langauge object ppt_demo.load data, R make educated guess type data variable , can see types assigned variables object running str() :go variable turn:word imported character variable. correct text data represent distinct categories; word different.word_type also imported character variable. However, text data represents two discrete categories, word nonword , really factor.trial_type also suffers issue word_type, category two levels practice experimental.id imported integer, numeric type. correct whilst number, number used label, numerical properties (participant 2 double participant 1).age imported integer thankfully, actually correct needs action.language imported integer. Language coded 1 = monolingual 2= bilingual R know , can see numbers. cause serious issues analysis pipeline unless fixed.accuracy imported character factor represents two distinct categories correct incorrect.rt imported numeric correct.trial_number imported integer correct.","code":"\ntypeof(ppt_demo$language)## [1] \"integer\"\nstr(all_words)\nstr(ppt_demo)\nstr(all_data)"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
